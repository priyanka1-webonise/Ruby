1.Find occurance of RUBY from string 1.
answer->
irb(main):018:0> string1.scan("RUBY")
=> ["RUBY", "RUBY", "RUBY"]
irb(main):020:0> string1.scan("RUBY").count
=> 3


2. Find the position where RUBY occures in the string 1.
answer->
irb(main):024:0> positions = string1.enum_for(:scan, /RUBY/).map { Regexp.last_match.begin(0) }
=> [0, 112, 194] #[1st RUBY occurance, 2nd RUBY occurance, 3rd RUBY occurance]
irb(main):025:0> 



3. Create array of words in string 1 & print them using a recursive function.
Answer->
irb(main):117:0> array=string1.split(".")
=> ["RUBY parses a file by looking for  one of the special tags that tells it to start interpreting the text as RUBY code", " The parser then executes all of the code it finds until it runs into a RUBY closing  tag"]
irb(main):118:0> array.each do |i|
irb(main):119:1* puts i
irb(main):120:1> end
RUBY parses a file by looking for  one of the special tags that tells it to start interpreting the text as RUBY code
 The parser then executes all of the code it finds until it runs into a RUBY closing  tag
=> ["RUBY parses a file by looking for  one of the special tags that tells it to start interpreting the text as RUBY code", " The parser then executes all of the code it finds until it runs into a RUBY closing  tag"]
irb(main):121:0> 



4. Capitalise string 1
answer->
	irb(main):011:0> string1="RUBY parses a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code. The parser then executes all of the code it finds until it runs into a RUBY closing <br/> tag."
=> "RUBY parses a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code. The parser then executes all of the code it finds until it runs into a RUBY closing <br/> tag."
irb(main):012:0> string1.upcase
=> "RUBY PARSES A FILE BY LOOKING FOR <BR/> ONE OF THE SPECIAL TAGS THAT TELLS IT TO START INTERPRETING THE TEXT AS RUBY CODE. THE PARSER THEN EXECUTES ALL OF THE CODE IT FINDS UNTIL IT RUNS INTO A RUBY CLOSING <BR/> TAG."
irb(main):013:0> 



5. Combine string 1 & 2.
answer->

irb(main):013:0> string2="RUBY does not require (or support) explicit type definition in variable declaration; a variable's type is determined by the context in which the variable is used."
=> "RUBY does not require (or support) explicit type definition in variable declaration; a variable's type is determined by the context in which the variable is used."
irb(main):014:0> string1+ string2
=> "RUBY parses a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code. The parser then executes all of the code it finds until it runs into a RUBY closing <br/> tag.RUBY does not require (or support) explicit type definition in variable declaration; a variable's type is determined by the context in which the variable is used."
irb(main):015:0> 


6. Print string 1 & 2 using heredoc.
Answer->
irb(main):129:0> HreDoc= <<END_OF_STRING
irb(main):130:0" Ruby is an open-source and is freely available on the Web.
irb(main):131:0" Ruby is a general-purpose, interpreted programming language.
irb(main):132:0" Ruby is a true object-oriented programming language.
irb(main):133:0" END_OF_STRING
=> "Ruby is an open-source and is freely available on the Web.\nRuby is a general-purpose, interpreted programming language.\nRuby is a true object-oriented programming language.\n"
irb(main):134:0> 


7. Print current date
answer->

irb(main):028:0> time = Time.new
=> Thu Dec 13 14:01:45 +0530 2012
irb(main):029:0> 
irb(main):031:0> values = time.to_a
=> [45, 1, 14, 13, 12, 2012, 4, 348, false, "IST"] #[sec,min,hour,day,month,year,wday,yday,isdst,zone]
irb(main):032:0> 


8. print 12th Jan 2012
ans->
irb(main):038:0> Time.local(2012, 1, 12)
=> Thu Jan 12 00:00:00 +0530 2012
irb(main):039:0> 



9. add 7 days in current date
answer->
irb(main):027:0> time1=Time.now()
=> Thu Dec 13 16:11:51 +0530 2012
irb(main):029:0> Time.gm(time1.year,time1.month,time1.day+7)
=> Thu Dec 20 00:00:00 UTC 2012
irb(main):030:0> 






10. Cut the string 1 into 4 parts & print it.
Ans->
irb(main):045:0> string1.split('',4)
=> ["R", "U", "B", "Y parses a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code. The parser then executes all of the code it finds until it runs into a RUBY closing <br/> tag."]
irb(main):046:0> 



11. Divide the string 1 by occurances of '.'. Combine the array in reverse word sequence
Ans->
irb(main):044:0> string1.split('.')
=> ["RUBY parses a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code", " The parser then executes all of the code it finds until it runs into a RUBY closing <br/> tag"]
irb(main):045:0>

#irb(main):058:0> string1.reverse
=> ".gat >/rb< gnisolc YBUR a otni snur ti litnu sdnif ti edoc eht fo lla setucexe neht resrap ehT .edoc YBUR sa txet eht gniterpretni trats ot ti sllet taht sgat laiceps eht fo eno >/rb< rof gnikool yb elif a sesrap YBUR"

irb(main):060:0> string1.reverse!
=> ".gat >/rb< gnisolc YBUR a otni snur ti litnu sdnif ti edoc eht fo lla setucexe neht resrap ehT .edoc YBUR sa txet eht gniterpretni trats ot ti sllet taht sgat laiceps eht fo eno >/rb< rof gnikool yb elif a sesrap YBUR"
irb(main):061:0> irb(main):105:0> str=string1.gsub!(/(<[^>]*>)|\n|\t/s){""}
=> "RUBY parses a file by looking for  one of the special tags that tells it to start interpreting the text as RUBY code. The parser then executes all of the code it finds until it runs into a RUBY closing  tag."
irb(main):106:0> 

 

12. Remove the HTML characters from string.
answer->
irb(main):105:0> str=string1.gsub!(/(<[^>]*>)|\n|\t/s){""}
=> "RUBY parses a file by looking for  one of the special tags that tells it to start interpreting the text as RUBY code. The parser then executes all of the code it finds until it runs into a RUBY closing  tag."
irb(main):106:0> 



13. Print the 'RUBY' word from string 1 by traversing it using string functions
Answer->
irb(main):018:0> string1.scan("RUBY")
=> ["RUBY", "RUBY", "RUBY"]



14. Find the length of string 1 & 2
ans->
irb(main):039:0> string1.length
=> 217
irb(main):040:0> string2.length
=> 162



15. Create file & write string 1 to that file using RUBY functions.
Answer-
irb(main):160:0>  aFile = File.new("/home/webonise/Desktop/project11/rubby", "w+")
=> #<File:/home/webonise/Desktop/project11/rubby>
irb(main):161:0> if aFile
irb(main):162:1> aFile.syswrite(string1)
irb(main):163:1> else
irb(main):164:1* puts"unable to open file"
irb(main):165:1> end
=> 207
irb(main):166:0> 



16. Print all Global varibles provided by RUBY
Answer->
irb(main):145:0>  puts global_variables
$-w
$:
$.
$KCODE
$-F
$*
$stderr
$,
$`
$binding
$-p
$"
$$
$<
$@
$-v
$-i
$deferr
$\
$=
$;
$PROGRAM_NAME
$stdout
$&
$global_variable
$-d
$LOAD_PATH
$-a
$VERBOSE
$FILENAME
$defout
$-0
$+
$0
$stdin
$~
$DEBUG
$-I
$_
$-K
$>
$/
$'
$-l
$LOADED_FEATURES
$?
$SAFE
$!
=> nil


17. Usage and examples of Header (RUBY) 
Answer->



18. Redirect page 1 to page 2.
Answer


19. Compare two dates. (12-4-2010 & 12-5-2011). Calculate the days between these two dates.
Answer->
irb(main):174:0> t1=Time.local(2011, 5, 12)
=> Thu May 12 00:00:00 +0530 2011
irb(main):175:0> t2=Time.local(2010, 4, 12)
=> Mon Apr 12 00:00:00 +0530 2010
irb(main):176:0> t3=t1.year-t2.year
=> 1
irb(main):177:0> t4=t1.month-t2.month
=> 1/home/webonise/Ruby
irb(main):178:0> t5=t1.day-t2.day
=> 0
irb(main):192:0> puts "year difference" +  t3.to_s()
year difference1
=> nil
irb(main):193:0> puts "month difference is" + t4.to_s()
month difference is1
=> nil
irb(main):195:0> puts "day difference is" + t5.to_s()
day difference is0
=> nil
irb(main):196:0> 




20. Print date after 20 days from current date
answer->

irb(main):205:0> p2=Time.gm(2012,12,13)
=> Thu Dec 13 00:00:00 UTC 2012
irb(main):206:0> if p2.day+20>31
irb(main):207:1> p3=p2.day+20-31
irb(main):208:1> puts p3
irb(main):209:1> else
irb(main):210:1* p3=p2.day+20
irb(main):211:1> puts p3
irb(main):212:1> end
2           #calculation for day



21. Print date in array format.
Answer->
irb(main):061:0> time = Time.new
=> Thu Dec 13 15:13:28 +0530 2012
irb(main):062:0> 
irb(main):064:0> values = time.to_a
=> [28, 13, 15, 13, 12, 2012, 4, 348, false, "IST"]   #array format[sec,min,hour,day,month,year,wday,yday,isdst,zone]
irb(main):065:0> 


